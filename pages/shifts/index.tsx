import { Shift } from '@prisma/client'
import type { NextPage } from 'next'
import { getSession } from 'next-auth/react'
import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import AuthBanner from '../../components/AuthBanner'
import { prisma } from '../../src/prisma'
import { useShiftHandlers } from './hooks/useShiftHandlers'

export async function getServerSideProps({ req }) {
  const session = await getSession({ req })
  const currentUser = await prisma.user.findUnique({ where: { email: session?.user?.email ?? '' } })
  const currentShift = await prisma.shift.findFirst({
    where: {
      finishedAt: null,
      userId: currentUser?.id
    },
  })
  const shifts = await prisma.shift.findMany({
    where: {
      finishedAt: {
        not: null
      }
    }
  })

  const serializeCurrentShift = currentShift ? { id: currentShift?.id, startedAt: currentShift?.startedAt?.toISOString() } : null
  const serializedShifts = shifts?.map(shift => ({ id: shift?.id, startedAt: shift?.startedAt?.toISOString(), finishedAt: shift?.finishedAt?.toISOString() }))

  return { props: { currentShift: serializeCurrentShift, shifts: serializedShifts } }
}

const Home: NextPage = ({currentShift, shifts}) => {
  const [timer, setTimer] = useState<number | undefined>();

  // TODO: Use Store (Context API or Redux) to manage state
  const [storedCurrentShift, setStoredCurrentShift] = useState(currentShift);
  const [storedShifts, setStoredShifts] = useState(shifts);
  
  const { handleOnShift } = useShiftHandlers(
    setStoredCurrentShift,
    setStoredShifts,
    setTimer,
    storedCurrentShift,
    storedShifts
  )

  useEffect(() => {
    if(storedCurrentShift) {
        const seconds = Math.round((new Date().getTime() - new Date(storedCurrentShift?.startedAt).getTime()) / 1000)
        setTimer(seconds);
    } else {
      setTimer(undefined)
    }
  }, [storedCurrentShift])

  useEffect(() => {
    if(timer != undefined && !!storedCurrentShift) {
      setTimeout(() => {
        setTimer(timer + 1)
      }, 1000)
    }
  }, [timer, storedCurrentShift])

  return (
    <div>
      <Head>
        <title>Shift App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='p-10'>
        <h1 className='text-2xl font-bold'>
          Shift App
        </h1>

        <AuthBanner />

        <p id={'timer'} className='my-3'>{storedCurrentShift && timer ? `Shift duration: ${timer}` : ''}</p>

        <button id={'shift-action-button'} onClick={handleOnShift} className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'>
          {!!storedCurrentShift ? 'End shift' : 'Start shift' }
        </button>
      
        <h1 className='text-2xl font-bold pt-10'>Shifts History</h1>
        <div className='pt-2'>
          {storedShifts?.map((shift: any) => {
            return (
              <p className='p-1' key={shift.id}>
                {`Id: ${shift?.id}, Start: ${new Date(shift.startedAt).toLocaleString()}, End: ${new Date(shift.finishedAt).toLocaleString()}`}
              </p>
            )
          })}
        </div>
      </main>
    </div>
  )
}

export default Home
